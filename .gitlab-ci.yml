stages:
  - build
  - build_ut
  - assign_test
  - target_test
#  - example_test
  - deploy

variables:
  # System environment
  # Common parameters for the 'make' during CI tests
  MAKEFLAGS: "-j5 --no-keep-going"
  # more attempts for more robust
  GET_SOURCES_ATTEMPTS: "10"
  ARTIFACT_DOWNLOAD_ATTEMPTS: "10"
  # We use get_sources.sh script to fetch the submodules and/or re-fetch the repo
  # if it was corrupted (if submodule update fails this can happen)
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: none
  ADF_PATH: "$CI_PROJECT_DIR"
  IDF_PATH: "$CI_PROJECT_DIR/esp-idf"
  CI_TARGET_UT_TEST_CONFIG_FILE: "$CI_PROJECT_DIR/.gitlab/ci/target-ut-test.yml"
  IDF_SKIP_CHECK_SUBMODULES: 1

.set_idf_version_and_update: &set_idf_version_and_update
  $ADF_PATH/tools/ci/set_idf.sh ${IDF_VERSION}

.execute_submodules: &execute_submodules
  if [[ "$DEEP_CLONE" == "true" ]]; then
  git submodule update --init;
  else
  git -c submodule."esp-idf".update=none submodule update --init;
  git submodule | grep esp-idf;
  export ORIG_HEAD=`git submodule | grep "esp-idf" | sed -r 's/-(.*) esp-idf/\1/g'`;
  echo ${ORIG_HEAD};
  rm esp-idf -rf;mkdir esp-idf;
  cd esp-idf;git init;
  git remote add origin ${GITLAB_SSH_SERVER}/idf/esp-idf.git;
  git fetch origin ${ORIG_HEAD}:${ORIG_HEAD} --depth 1;
  git checkout ${ORIG_HEAD};
  cd -;
  fi

before_script:
  # add gitlab ssh key
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  # replace submodule esp-idf to internal repository to speedup cloning
  - sed -i "s%https://github.com/espressif/esp-idf%${GITLAB_SSH_SERVER}/idf/esp-idf.git%" .gitmodules
  # replace submodule esp-adf-libs to internal repository to speedup cloning
  - sed -i "s%https://github.com/espressif/esp-adf-libs%${GITLAB_SSH_SERVER}/adf/esp-adf-libs.git%" .gitmodules
  # - sed -i "s%https://github.com/espressif/esp-sr.git%${GITLAB_SSH_SERVER}/speech-recognition-internal/esp_sr_public.git%" .gitmodules
  - git config --global http.postBuffer 524288000
  - *execute_submodules
  - echo "current path:"$(pwd)
  - cd $ADF_PATH/..
  - if [[ ! -d "$ADF_PATH/../adf-libs-ut/" ]]; then git clone ssh://git@gitlab.espressif.cn:27227/adf/adf-libs-ut.git;else echo "adf-libs-ut folder already exists";fi
  - cd -
  - if [ -e $ADF_UT/tools/CreateSectionTable.pyc ]; then rm -f $ADF_UT/tools/CreateSectionTable.pyc; fi

  # To disable set -e for automatic error detection, due to the switch_branch.sh use $? check return value
  - set +e +o pipefail
  - source $ADF_PATH/tools/ut/switch_branch.sh
  - set -e -o pipefail

  # - cd $IDF_PATH
  # - git checkout $IDF_VERSION
  # - $IDF_PATH/tools/idf_tools.py --non-interactive install && eval "$($IDF_PATH/tools/idf_tools.py --non-interactive export)"
  - source $IDF_PATH/tools/ci/setup_python.sh
  - if [ "$IDF_VERSION" != "release/v4.4" ];then source esp-idf/tools/ci/configure_ci_environment.sh;fi

  # (the same regular expressions are used to set these are used in 'only:' sections below
  # - source esp-idf/tools/ci/configure_ci_environment.sh
  # fetch the submodules (& if necessary re-fetch repo) from gitlab

.add_gitlab_key_before:
  before_script: &add_gitlab_key_before
    - echo "Not fetching submodules"
    - source $IDF_PATH/tools/ci/configure_ci_environment.sh
    # add gitlab ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $AUTO_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

.build_template: &build_template
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - build
  variables:
    BATCH_BUILD: "1"
    V: "0"

.build_adf_test:
  <<: *build_template
  artifacts:
    when: always
    paths:
      - adf-cli/build/*.bin
      - adf-cli/build/*.elf
      - adf-cli/build/*.map
      - adf-cli/build/download.config
      - adf-cli/build/bootloader/*.bin
      - $IDF_PATH/tools/ci
      - $IDF_PATH/components/esptool_py
      - $IDF_PATH/components/partition_table
    expire_in: 1 month
  script:
    - cd ${IDF_PATH}
    - git submodule update --init --recursive
    - cd ${ADF_PATH}/components/esp-adf-libs
    - git log -2
    - cd ${ADF_PATH}
    - git clone ${ADF_TEST_CLI_REPO}
    - cd adf-cli
    - git checkout ${CI_COMMIT_REF_NAME} || echo "Using adf-cli default branch..."
    - make defconfig
    - make
    - make print_flash_cmd > build/download.config

build_docs:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp-idf-doc-env:v7
  tags:
    - build_docs
  artifacts:
    when: always
    paths:
      # English version of documentation
      - docs/en/doxygen-warning-log.txt
      - docs/en/sphinx-warning-log.txt
      - docs/en/sphinx-warning-log-sanitized.txt
      - docs/en/_build/html
      # Chinese version of documentation
      - docs/zh_CN/doxygen-warning-log.txt
      - docs/zh_CN/sphinx-warning-log.txt
      - docs/zh_CN/sphinx-warning-log-sanitized.txt
      - docs/zh_CN/_build/html
    expire_in: 1 mos
  script:
    - source /opt/pyenv/activate && pyenv global 3.6.10
    - pip install "setuptools<57.5.0"
    - pip install "funcparserlib==0.3.6"
    - /opt/pyenv/pyenv-1.2.16/versions/3.6.10/bin/python -m pip install --user -r docs/requirements.txt
    - cd docs
    - ./check_lang_folder_sync.sh
    - cd en
    - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh
    - cd ../zh_CN
    - make gh-linkcheck
    - make html
    - ../check_doc_warnings.sh

.assign_test:
  tags:
    - assign_test
  image: $CI_DOCKER_REGISTRY/audio_test_env$BOT_DOCKER_IMAGE_TAG
  stage: assign_test
  # gitlab ci do not support match job with RegEx or wildcard now in dependencies.
  # we have a lot build example jobs. now we don't use dependencies, just download all artificats of build stage.
  dependencies:
    - build_examples_v44_cmake
    - build_examples_v33_make
  variables:
    TEST_FW_PATH: "$CI_PROJECT_DIR/general-test-framework"
    EXAMPLE_CONFIG_OUTPUT_PATH: "$CI_PROJECT_DIR/examples/test_configs"
    AUTO_TEST_PATH: "$CI_PROJECT_DIR/audio_auto_test"
  artifacts:
    paths:
      - $TEST_FW_PATH
      - $EXAMPLE_CONFIG_OUTPUT_PATH
      - $AUTO_TEST_PATH
    expire_in: 1 mos
  before_script: *add_gitlab_key_before
  script:
    - source /opt/pyenv/activate
    - pyenv global 3.5.5
    - git clone ${AUDIO_AUTO_REPO}
    - git clone ${TEST_FW_REPO}
    # assign example tests
    - python $TEST_FW_PATH/CIAssignExampleTest.py $CI_PROJECT_DIR/examples $CI_PROJECT_DIR/.gitlab-ci.yml $EXAMPLE_CONFIG_OUTPUT_PATH

push_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/esp-adf.git
    - tools/ci/push_to_github.sh

include:
  - '.gitlab/ci/build-examples.yml'
  - '.gitlab/ci/build-ut.yml'
  - '.gitlab/ci/assign-test.yml'
  - '.gitlab/ci/target-ut-test.yml'
  - '.gitlab/ci/rules.yml'
